#pragma kernel GeneratePoints

struct UnityRaycastHit {
    float3 p;
    float3 normal;
    float distance;
    uint colliderInstanceID;
};

struct PointData {
    float3 position;
    float3 normal;
    float startTime;
};

// --- MODIFIED ---
// Changed from AppendStructuredBuffer to RWStructuredBuffer
// This allows us to write to any index, not just append to the end.
RWStructuredBuffer<PointData> _ProcessedPointsBuffer;
StructuredBuffer<UnityRaycastHit> _RaycastHitsBuffer;


// Uniforms passed from C#
float _PropagationSpeed;
float _Time;
int _RayCount;

// --- NEW ---
// The starting index in the buffer where this wave's points should be written.
int _PointOffset;

[numthreads(64,1,1)]
void GeneratePoints (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _RayCount)
    {
        return;
    }

    UnityRaycastHit hit = _RaycastHitsBuffer[id.x];
    PointData p;

    // --- MODIFIED ---
    // Instead of filtering out misses, we process every ray.
    // If a ray missed, we create a "dead" point by setting its startTime to -1.
    // The rendering shader will automatically cull this point because its age will be negative.
    if (hit.colliderInstanceID > 0)
    {
        // This was a valid hit.
        p.position = hit.p;
        p.normal = hit.normal;
        p.startTime = _Time + (hit.distance / _PropagationSpeed);
    }
    else
    {
        // This was a miss. Create a dead point.
        p.position = float3(0, 0, 0);
        p.normal = float3(0, 1, 0);
        p.startTime = -1.0f; // This marks it for immediate culling in the renderer.
    }

    // Write the point data to the correct, offset position in the buffer.
    _ProcessedPointsBuffer[id.x + _PointOffset] = p;
}